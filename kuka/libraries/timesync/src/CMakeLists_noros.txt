CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(timesync)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall") 

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/TICSyncCore ${CMAKE_SOURCE_DIR}/../include)

SET(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) 
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_BUILD_TYPE Release)

option(BUILD_Server "Build the time echo server" ON)
option(BUILD_Client "Build the time client" ON)

set(Boost_USE_STATIC_LIBS		ON)
set(Boost_USE_MULTITHREADED		ON)
set(Boost_USE_STATIC_RUNTIME	OFF)
#find_package(Boost 1.47.0 COMPONENTS thread date_time REQUIRED)
find_package(Boost COMPONENTS thread date_time REQUIRED)

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})

ADD_LIBRARY(timelib TimeClient.cpp timelib.cpp udpListener.cpp udpSender.cpp linux_time.cpp)
TARGET_LINK_LIBRARIES(timelib ${Boost_LIBRARIES})

IF(WIN32)
  TARGET_LINK_LIBRARIES(timelib ws2_32.lib)
ENDIF(WIN32)

if(BUILD_Server)
  ADD_EXECUTABLE(time_echo_server bin_time_echo_server.cpp)
  TARGET_LINK_LIBRARIES(time_echo_server timelib)
endif(BUILD_Server)

if(BUILD_Client)
  ADD_EXECUTABLE(time_client bin_time_client.cpp)
  TARGET_LINK_LIBRARIES(time_client timelib)

  ADD_EXECUTABLE(time_client_alt bin_time_client_alternate.cpp)
  TARGET_LINK_LIBRARIES(time_client_alt timelib)
endif(BUILD_Client)