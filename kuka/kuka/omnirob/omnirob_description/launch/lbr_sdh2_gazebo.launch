<launch>
	
	<!-- Get package path-->
	<param name="package_path" value="$(find kuka_motion_control)" />
	<param name="planner_package_path" value="$(find rrt_star_algorithm)" />
	
	
    
	 <!-- these are the arguments you can pass this launch file, for example paused:=true -->
	<arg name="paused" default="false"/>
	<arg name="use_sim_time" default="true"/>
	<arg name="gui" default="true"/>
	<arg name="headless" default="false"/>
  
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find omnirob_description)/worlds/lbr.world"/>
		<arg name="debug" value="false" />
		<arg name="gui" value="$(arg gui)" />
		<arg name="paused" value="$(arg paused)"/>
		<arg name="use_sim_time" value="$(arg use_sim_time)"/>
		<arg name="headless" value="$(arg headless)"/>
    </include>
	
	
	<!-- Load the URDF and SRDF into the ROS Parameter Server -->
  	<param name="robot_description" command="$(find xacro)/xacro.py '$(find omnirob_description)/urdf/lbr_sdh2_new.xacro'" />
	<param name="robot_description_semantic" textfile="$(find omnirob_description)/srdf/lbr_sdh2.srdf" />

 	 <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model lbr -param robot_description"/>
  
	
	<!-- Start GUI for actuating joints manually-->
	<param name="use_gui" value="True"/>
	
	<!-- Start joint state publisher-->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	
	<!-- Load joint controller configurations from YAML file to parameter server -->
	<rosparam file="$(find omnirob_description)/config/lbr_control.yaml" command="load"/>

	<!-- Load joint controller configurations from YAML file to parameter server -->
	<rosparam file="$(find sdh2_description)/config/sdh2_control.yaml" command="load"/> 
	
	<!-- load the controllers -->
	<node name="controller_spawner_robot" pkg="controller_manager" type="spawner" respawn="false" 
	   output="screen" ns="/lbr" args="joint_state_controller joint1_position_controller joint2_position_controller joint3_position_controller joint4_position_controller 
	   joint5_position_controller joint6_position_controller joint7_position_controller"/>
	
	
	<!-- load the controllers -->
	 <node name="controller_spawner_sdh" pkg="controller_manager" type="spawner" respawn="false" 
	   output="screen" ns="/sdh2" args="joint_state_controller2 joint8_position_controller joint9_position_controller joint10_position_controller joint11_position_controller
	joint12_position_controller joint13_position_controller joint14_position_controller joint15_position_controller"/> 
	
	
	
	<!-- convert joint states to TF transforms for rviz, etc -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/lbr_sdh2/joint_states" />
	</node>
	
	<!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" /> -->
	
	
	
	<!-- GDB Debug Option -->
    <arg name="debug" default="false" />
    <arg unless="$(arg debug)" name="launch_prefix" value="" />
    <arg     if="$(arg debug)" name="launch_prefix"
	   value="gdb -x $(find kuka_lbr_moveit_config)/launch/gdb_settings.gdb --ex run --args" />
	   
	<!-- Verbose Mode Option -->
   <arg name="info" default="$(arg debug)" />
   <arg unless="$(arg info)" name="command_args" value="" />
   <arg     if="$(arg info)" name="command_args" value="--debug" />
   
   
   <!-- move_group settings -->
   <arg name="allow_trajectory_execution" default="true"/>
   <arg name="fake_execution" default="false"/>
   <arg name="max_safe_path_cost" default="1"/>
   <arg name="jiggle_fraction" default="0.05" />
   <arg name="publish_monitored_planning_scene" default="true"/>
  
	
	<!-- Start the actual move_group node/action server -->
    <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
		<!-- Set the display variable, in case OpenGL code is used internally -->
		<env name="DISPLAY" value="$(optenv DISPLAY :0)" />

		<param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
		<param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
		<param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

		<!-- MoveGroup capabilities to load -->
		<param name="capabilities" value="move_group/MoveGroupCartesianPathService
						  move_group/MoveGroupExecuteService
						  move_group/MoveGroupKinematicsService
						  move_group/MoveGroupMoveAction
						  move_group/MoveGroupPickPlaceAction
						  move_group/MoveGroupPlanService
						  move_group/MoveGroupQueryPlannersService
						  move_group/MoveGroupStateValidationService
						  move_group/MoveGroupGetPlanningSceneService
						  move_group/ClearOctomapService
						  " />

		<!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
		<param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
		<param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
		<param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
		<param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
    </node>
	
	
	
	<node pkg="rviz" type="rviz" name="rviz" args="-d $(find kuka_motion_control)/motion_control_display.rviz"/> 
	
	
</launch>
